# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: freeride-comp

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: default
  region: us-west-2


# you can overwrite defaults here
#  stage: dev

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: "arn:aws:s3:::tfcompdata/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: "arn:aws:s3:::tfcompdata/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
 # include:
 #   - include-me.js
 #   - include-me-dir/**
 exclude:
   - .eslintrc
   - .gitignore
   - .node-version
   - .npmignore
   - README.md
   - .git/**
   - docs/**
   - node_modules/eslint/**
   - node_modules/eslint-plugin-lodash/**
   - node_modules/expect/**
   - node_modules/mocha/**
   - node_modules/serverless/**
   - s3content/**
   - scripts/**
   - test/**

functions:

  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

  startList:
    handler: handler.startList
    events:
      - http:
          path: startlist
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                seriesId: true
                seriesYear: true
                compId: true
                runGroup: true
                rerandomize: false
                lookup: false
          response:
            headers:
              Content-Type: "'text/csv'"
            template: $input.path('$').csv

  results:
    handler: handler.results
    events:
      - http:
          path: results
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                  seriesId: true
                  seriesYear: true
                  compId: true
                  division: false
                  divisionType: false
                  content: false
                  ties: false
                  lineScalar: false
                  controlScalar: false
                  techniqueScalar: false
                  fluidityScalar: false
                  styleScalar: false
          response:
            headers:
              Content-Type: "'text/csv'"
            template: $input.path('$').csv

  resultDetails:
    handler: handler.resultDetails
    events:
      - http:
          path: resultdetails
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                  seriesId: true
                  seriesYear: true
                  compId: true
                  runGroup: true
                  lineScalar: false
                  controlScalar: false
                  techniqueScalar: false
                  fluidityScalar: false
                  styleScalar: false
          response:
            headers:
              Content-Type: "'text/csv'"
            template: $input.path('$').csv

  validateResults:
    handler: handler.validateResults
    events:
      - http:
          path: validateresults
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                  seriesId: true
                  seriesYear: true
                  compId: true
                  runGroup: true
          response:
            headers:
              Content-Type: "'text/csv'"
            template: $input.path('$').csv

  overallResults:
    handler: handler.overallResults
    events:
      - http:
          path: overallresults
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                  seriesId: true
                  seriesYear: true
                  division: true
          response:
            headers:
              Content-Type: "'text/csv'"
            template: $input.path('$').csv

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
